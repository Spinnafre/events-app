services:

  database1:
      image: postgres:16-alpine
      container_name: "database1"
      env_file: ".env.service1"
      command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off -c random_page_cost=1.0
      volumes:
        - ./.docker/postgres/database1/db-data:/var/lib/postgresql/data
        - ./.docker/postgres/database1:/docker-entrypoint-initdb.d 
      ports:
        - "127.0.0.1:5431:5432"
      healthcheck:
        test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
        interval: 30s
        timeout: 60s
        retries: 5
        start_period: 80s  
      restart: always
      networks:
        - database1
      # tmpfs: /var/lib/postgresql/data

  database2:
      image: postgres:16-alpine
      container_name: "database2"
      env_file: ".env.service2"
      command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off -c random_page_cost=1.0
      volumes:
        - ./.docker/postgres/database2/db-data:/var/lib/postgresql/data
        - ./.docker/postgres/database2:/docker-entrypoint-initdb.d 
      ports:
        - "127.0.0.1:5432:5432"
      healthcheck:
        test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
        interval: 30s
        timeout: 60s
        retries: 5
        start_period: 80s  
      restart: always
      networks:
        - database2


  # pgadmin:
  #   image: dpage/pgadmin4:latest
  #   container_name: pgadmin
  #   restart: always
  #   depends_on:
  #     - database
  #   user: '$UID:$GID'
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_EMAIL}
  #     PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASSWORD}
  #   ports:
  #     - "127.0.0.1:3333:80"
  #   volumes:
  #     - ./db-data/pgadmin:/var/lib/pgadmin
  #   networks:
  #     - back-tier

  app:
    build: .
    ports:
      - "3000:3000"
      - 3001:3001
    depends_on:
      - database1
      - database2
    volumes:
      - .:/home/node/app
    networks:
      - database1
      - database2

networks:
  database1:
  database2: